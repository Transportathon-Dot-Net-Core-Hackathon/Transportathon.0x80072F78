// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Transportathon._0x80072F78.Infrastructure.Database;

#nullable disable

namespace Transportathon._0x80072F78.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230916200612_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AddressType")
                        .HasMaxLength(150)
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LocalAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alley")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CompanyUsersId")
                        .HasColumnType("uuid");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VKN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUsersId");

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c266446-0a71-4469-8f1f-f26a3f4d3f81"),
                            Alley = "Bursa Sokak",
                            ApartmentNumber = "1",
                            BuildingNumber = "1",
                            City = "Bursa Şehri",
                            CompanyName = "Serhat Co.",
                            CompanyUsersId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921"),
                            District = "Bursa İlçesi",
                            Name = "Serhat",
                            PostCode = "16200",
                            Street = "Bursa Mahallesi",
                            Surname = "Sandıkçıoğlu",
                            Title = "LTD",
                            VKN = "1234567890"
                        });
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<int[]>("DrivingLicenceTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("EMail")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Experience")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Drivers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b1fe640-2efc-4b68-9f61-6efc5cf2170d"),
                            Age = 26,
                            DrivingLicenceTypes = new[] { 0 },
                            EMail = "driver@driver.com",
                            Experience = "6",
                            Name = "DriverName1",
                            PhoneNumber = "1234567890",
                            Surname = "DriverSurname1",
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921")
                        },
                        new
                        {
                            Id = new Guid("bad1d1c9-0f00-4919-9587-8ff8e9629fa2"),
                            Age = 27,
                            DrivingLicenceTypes = new[] { 0 },
                            EMail = "driver@driver.com",
                            Experience = "7",
                            Name = "DriverName2",
                            PhoneNumber = "1234567890",
                            Surname = "DriverSurname2",
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921")
                        },
                        new
                        {
                            Id = new Guid("6600291f-27d7-4e92-9583-2401f22198a0"),
                            Age = 28,
                            DrivingLicenceTypes = new[] { 0 },
                            EMail = "driver@driver.com",
                            Experience = "8",
                            Name = "DriverName3",
                            PhoneNumber = "1234567890",
                            Surname = "DriverSurname3",
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921")
                        },
                        new
                        {
                            Id = new Guid("c7f69770-5444-4146-a0d4-b2604caf50d6"),
                            Age = 29,
                            DrivingLicenceTypes = new[] { 0 },
                            EMail = "driver@driver.com",
                            Experience = "9",
                            Name = "DriverName4",
                            PhoneNumber = "1234567890",
                            Surname = "DriverSurname4",
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921")
                        },
                        new
                        {
                            Id = new Guid("99e157be-a0be-4c44-8e1c-7d7e4b4a361f"),
                            Age = 30,
                            DrivingLicenceTypes = new[] { 2, 0 },
                            EMail = "driver@driver.com",
                            Experience = "10",
                            Name = "DriverName5",
                            PhoneNumber = "1234567890",
                            Surname = "DriverSurname5",
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921")
                        });
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name", "CompanyId")
                        .IsUnique()
                        .HasDatabaseName("uCompanyIdName");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.TeamWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasMaxLength(5)
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Experience")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamWorkers", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasMaxLength(100)
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VehicleLicensePlate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("VehicleStatus")
                        .HasMaxLength(150)
                        .HasColumnType("integer");

                    b.Property<int>("VehicleType")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<string>("VehicleVolumeCapacity")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("VehicleWeightCapacity")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("90859246-16bf-4a5a-bcb4-b5ec6d9216db"),
                            DriverId = new Guid("0b1fe640-2efc-4b68-9f61-6efc5cf2170d"),
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921"),
                            VehicleLicensePlate = "16 SI 51",
                            VehicleStatus = 1,
                            VehicleType = 1,
                            VehicleVolumeCapacity = "50",
                            VehicleWeightCapacity = "1200"
                        },
                        new
                        {
                            Id = new Guid("a8a867a4-d940-437f-8d8c-57894b4aba72"),
                            DriverId = new Guid("bad1d1c9-0f00-4919-9587-8ff8e9629fa2"),
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921"),
                            VehicleLicensePlate = "16 SI 52",
                            VehicleStatus = 0,
                            VehicleType = 1,
                            VehicleVolumeCapacity = "50",
                            VehicleWeightCapacity = "1200"
                        },
                        new
                        {
                            Id = new Guid("cd859506-6838-45d3-9c1f-0e05b03b5ac0"),
                            DriverId = new Guid("6600291f-27d7-4e92-9583-2401f22198a0"),
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921"),
                            VehicleLicensePlate = "16 SI 53",
                            VehicleStatus = 3,
                            VehicleType = 0,
                            VehicleVolumeCapacity = "50",
                            VehicleWeightCapacity = "1200"
                        },
                        new
                        {
                            Id = new Guid("0dee1f1f-38bb-4e9b-836e-4ea38a5510ef"),
                            DriverId = new Guid("c7f69770-5444-4146-a0d4-b2604caf50d6"),
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921"),
                            VehicleLicensePlate = "16 SI 54",
                            VehicleStatus = 0,
                            VehicleType = 1,
                            VehicleVolumeCapacity = "50",
                            VehicleWeightCapacity = "1200"
                        },
                        new
                        {
                            Id = new Guid("ce101cee-f038-4c62-a736-c738dd94ff8b"),
                            DriverId = new Guid("99e157be-a0be-4c44-8e1c-7d7e4b4a361f"),
                            UserId = new Guid("08d364c6-45fd-434e-83c9-eb363849d921"),
                            VehicleLicensePlate = "16 SI 55",
                            VehicleStatus = 3,
                            VehicleType = 0,
                            VehicleVolumeCapacity = "50",
                            VehicleWeightCapacity = "1200"
                        });
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserImage")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("07078181-35ae-4f45-a8d1-c3327efdc0d4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce8fa663-5f7b-424a-b1b5-45628fe65950",
                            Email = "ismailabanoz1213@gmail.com",
                            EmailConfirmed = false,
                            FamilyName = "Abanoz",
                            FirstName = "İsmail",
                            LockoutEnabled = false,
                            NormalizedUserName = "ISMAIL",
                            PasswordHash = "AQAAAAIAAYagAAAAEG11jDyWLS6Lfww+1TqmBWrocPKEaruQ8y7i1xEPx32/ZCcs1O8zpXqmkZwjyYbU2g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ismail"
                        },
                        new
                        {
                            Id = new Guid("08d364c6-45fd-434e-83c9-eb363849d921"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e57ff8c8-496c-4cb3-bb8a-684de65231e9",
                            Email = "serhat16_@hotmail.com",
                            EmailConfirmed = false,
                            FamilyName = "Sandıkçıoğlu",
                            FirstName = "Serhat",
                            LockoutEnabled = false,
                            NormalizedUserName = "SERHAT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjhrMRn5E1EAO7PZRzvyqo+npO3v0Afbs21+RxLw4rAIXRutHXkFNLv8p1c54Ub2w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "serhat"
                        });
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.UserRefreshToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Offer.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("OfferTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TransportationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TransportationRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TransportationRequestId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.TransportationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DestinationAddressId")
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FirstDateRange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastDateRange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("OutputAddressId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<float?>("Volume")
                        .HasColumnType("real");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("OutputAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("TransportationRequests", (string)null);
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Company", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", "CompanyUsers")
                        .WithMany()
                        .HasForeignKey("CompanyUsersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyUsers");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Team", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.ForCompany.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.TeamWorker", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.ForCompany.Team", null)
                        .WithMany("TeamWorkers")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Vehicle", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.ForCompany.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetRoleClaim", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserClaim", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserLogin", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserRole", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUserToken", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.Offer.Offer", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.ForCompany.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transportathon._0x80072F78.Core.Entities.ForCompany.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transportathon._0x80072F78.Core.Entities.TransportationRequest", "TransportationRequest")
                        .WithMany()
                        .HasForeignKey("TransportationRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transportathon._0x80072F78.Core.Entities.ForCompany.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Team");

                    b.Navigation("TransportationRequest");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.TransportationRequest", b =>
                {
                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Address", "DestinationAddress")
                        .WithMany()
                        .HasForeignKey("DestinationAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Address", "OutputAddress")
                        .WithMany()
                        .HasForeignKey("OutputAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transportathon._0x80072F78.Core.Entities.Identity.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationAddress");

                    b.Navigation("OutputAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportathon._0x80072F78.Core.Entities.ForCompany.Team", b =>
                {
                    b.Navigation("TeamWorkers");
                });
#pragma warning restore 612, 618
        }
    }
}
